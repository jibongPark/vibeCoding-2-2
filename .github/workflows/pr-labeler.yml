name: PR Auto Labeler

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Auto Label PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const title = context.payload.pull_request.title.toLowerCase();
          const branch = context.payload.pull_request.head.ref.toLowerCase();
          const labels = [];
          
          // 브랜치명 기반 라벨링
          if (branch.includes('feature/')) {
            labels.push('feature');
          } else if (branch.includes('bugfix/') || branch.includes('fix/')) {
            labels.push('bug');
          } else if (branch.includes('hotfix/')) {
            labels.push('hotfix');
          } else if (branch.includes('refactor/')) {
            labels.push('refactor');
          } else if (branch.includes('docs/')) {
            labels.push('documentation');
          }
          
          // 제목 기반 라벨링
          if (title.includes('[task-')) {
            labels.push('task');
          }
          
          if (title.includes('test') || title.includes('테스트')) {
            labels.push('test');
          }
          
          if (title.includes('backend') || title.includes('api')) {
            labels.push('backend');
          }
          
          if (title.includes('frontend') || title.includes('ui')) {
            labels.push('frontend');
          }
          
          // 우선순위 라벨 (제목에서 키워드 탐지)
          if (title.includes('urgent') || title.includes('critical') || title.includes('긴급')) {
            labels.push('priority:high');
          } else if (title.includes('minor') || title.includes('개선')) {
            labels.push('priority:low');
          } else {
            labels.push('priority:medium');
          }
          
          // 기본 라벨
          labels.push('needs-review');
          
          // 중복 제거
          const uniqueLabels = [...new Set(labels)];
          
          if (uniqueLabels.length > 0) {
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: uniqueLabels
              });
              
              console.log(`PR #${prNumber}에 다음 라벨들이 추가되었습니다: ${uniqueLabels.join(', ')}`);
            } catch (error) {
              console.log(`라벨 추가 중 오류 발생: ${error.message}`);
            }
          } 